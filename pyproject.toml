[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "mindtube"
version = "0.1.0"
description = "YouTube video transcript processing and summarization tool"
readme = "README.md"
requires-python = ">=3.12"
license = {text = "MIT"}
authors = [
    {name = "MindTube Team", email = "team@mindtube.dev"}
]
keywords = ["youtube", "transcript", "summarization", "llm", "ai"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Text Processing :: Linguistic",
    "Topic :: Multimedia :: Video",
]

dependencies = [
    "youtube-transcript-api>=0.6.0",
    "openai>=1.0.0",
    "pydantic>=2.0.0",
    "click>=8.0.0",
    "rich>=13.0.0",
    "jsonschema>=4.0.0",
    "tiktoken>=0.5.0",
    "python-dotenv>=1.0.0",
    "aiofiles>=23.0.0",
    "httpx>=0.25.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.10.0",
    "pytest-cov>=4.0.0",
    "syrupy>=4.0.0",
    "hypothesis>=6.0.0",
    "responses>=0.23.0",
    "respx>=0.20.0",
    "freezegun>=1.2.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "pre-commit>=3.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
]
api = [
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "python-multipart>=0.0.6",
    "redis>=5.0.0",
]
web = [
    "jinja2>=3.1.0",
    "aiofiles>=23.0.0",
]
all = ["mindtube[dev,api,web]"]

[project.scripts]
mindtube = "mindtube.cli:main"

[project.urls]
Homepage = "https://github.com/mindtube/mindtube"
Repository = "https://github.com/mindtube/mindtube"
Documentation = "https://mindtube.readthedocs.io"
"Bug Tracker" = "https://github.com/mindtube/mindtube/issues"

[tool.setuptools.packages.find]
where = ["packages/core"]
include = ["mindtube*"]

[tool.setuptools.package-dir]
"" = "packages/core"

# Ruff configuration
[tool.ruff]
target-version = "py312"
line-length = 88
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PL",  # pylint
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",   # line too long (handled by black)
    "PLR0913", # too many arguments
    "PLR0912", # too many branches
    "PLR0915", # too many statements
    "PLR2004", # magic value used in comparison
]
exclude = [
    ".git",
    ".venv",
    "__pycache__",
    "build",
    "dist",
    "*.egg-info",
]

[tool.ruff.per-file-ignores]
"tests/**/*.py" = ["ARG", "S101", "PLR2004"]

[tool.ruff.isort]
known-first-party = ["mindtube"]
force-sort-within-sections = true

# MyPy configuration
[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "youtube_transcript_api.*",
    "tiktoken.*",
    "syrupy.*",
    "responses.*",
    "respx.*",
    "freezegun.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=mindtube",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-fail-under=85",
]
testpaths = ["tests"]
markers = [
    "unit: Unit tests (fast, no external dependencies)",
    "integration: Integration tests (may use external services)",
    "e2e: End-to-end tests (slow, requires real services)",
    "slow: Slow tests (skip in CI unless explicitly requested)",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

# Coverage configuration
[tool.coverage.run]
source = ["packages/core/mindtube"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Black configuration
[tool.black]
target-version = ['py312']
line-length = 88
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''