[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "mindtube"
version = "0.1.0"
description = "YouTube Learning Assistant - Extract transcripts, summaries, and mindmaps from YouTube videos"
readme = "README.md"
license = "MIT"
authors = [
    {name = "MindTube Team", email = "team@mindtube.dev"},
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Education",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Education",
    "Topic :: Multimedia :: Video",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
keywords = ["youtube", "transcript", "summary", "mindmap", "ai", "learning"]
requires-python = ">=3.8"

dependencies = [
    # Core dependencies - will be populated in TASK-003
]

[project.optional-dependencies]
dev = [
    # Development dependencies - will be populated in TASK-003
]
api = [
    # API dependencies - will be populated in TASK-003
]
whisper = [
    # Whisper ASR dependencies - will be populated in TASK-003
]

[project.urls]
Homepage = "https://github.com/mindtube/mindtube"
Documentation = "https://mindtube.readthedocs.io"
Repository = "https://github.com/mindtube/mindtube"
"Bug Tracker" = "https://github.com/mindtube/mindtube/issues"

[project.scripts]
mindtube = "mindtube.cli.main:app"

[tool.hatch.build.targets.wheel]
packages = ["mindtube"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=mindtube",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "e2e: End-to-end tests",
    "performance: Performance tests",
    "slow: Slow running tests",
]

[tool.coverage.run]
source = ["mindtube"]
omit = [
    "tests/*",
    "mindtube/__main__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[tool.ruff]
target-version = "py38"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["B011"]

[tool.mypy]
python_version = "3.8"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_equality = true