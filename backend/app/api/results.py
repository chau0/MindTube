"""
Results and export API endpoints
"""

from fastapi import APIRouter, HTTPException, Response
from fastapi.responses import PlainTextResponse
from app.models.schemas import ProcessingResult
from app.api.ingest import jobs_store
from app.core.logging import logger
from typing import Optional

router = APIRouter()

@router.get("/result/{job_id}", response_model=ProcessingResult)
async def get_job_result(job_id: str):
    """
    Get the complete processing result for a completed job
    
    Returns the full structured result including:
    - Video metadata
    - Short and detailed summaries
    - Key ideas and actionable takeaways
    - Full transcript with timestamps
    - Processing statistics
    """
    try:
        if job_id not in jobs_store:
            raise HTTPException(
                status_code=404,
                detail=f"Job {job_id} not found"
            )
        
        job_data = jobs_store[job_id]
        
        if job_data["status"] != "completed":
            raise HTTPException(
                status_code=400,
                detail=f"Job {job_id} is not completed (status: {job_data['status']})"
            )
        
        if not job_data.get("result"):
            raise HTTPException(
                status_code=500,
                detail=f"Job {job_id} completed but no result available"
            )
        
        logger.debug("Job result retrieved", job_id=job_id)
        
        return job_data["result"]
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error("Failed to get job result", job_id=job_id, error=str(e))
        raise HTTPException(
            status_code=500,
            detail=f"Failed to retrieve job result: {str(e)}"
        )

@router.get("/export/{job_id}/markdown", response_class=PlainTextResponse)
async def export_markdown(job_id: str):
    """
    Export job results as Markdown file
    
    Returns a formatted Markdown document with:
    - Video metadata header
    - Short summary
    - Detailed summary with timestamps
    - Key ideas with timestamps
    - Actionable takeaways with timestamps
    - Full transcript (optional)
    """
    try:
        if job_id not in jobs_store:
            raise HTTPException(
                status_code=404,
                detail=f"Job {job_id} not found"
            )
        
        job_data = jobs_store[job_id]
        
        if job_data["status"] != "completed" or not job_data.get("result"):
            raise HTTPException(
                status_code=400,
                detail=f"Job {job_id} is not completed or has no result"
            )
        
        result = job_data["result"]
        metadata = result["video_metadata"]
        
        # Generate Markdown content
        markdown_content = f"""# {metadata['title']}

**Channel:** {metadata['channel_name']}  
**Duration:** {metadata['duration_seconds'] // 60}:{metadata['duration_seconds'] % 60:02d}  
**Processed by:** MindTube  
**Generated:** {result['completed_at']}

---

## 📝 Short Summary

{chr(10).join(f"- {line}" for line in result['short_summary'])}

---

## 📖 Detailed Summary

{chr(10).join(f"- {item['content']}" + (f" [{format_timestamp(item.get('timestamp_ms', 0))}]({item.get('youtube_link', '')})" if item.get('timestamp_ms') else "") for item in result['detailed_summary'])}

---

## 💡 Key Ideas

{chr(10).join(f"- {item['content']}" + (f" [{format_timestamp(item.get('timestamp_ms', 0))}]({item.get('youtube_link', '')})" if item.get('timestamp_ms') else "") for item in result['key_ideas'])}

---

## 🎯 Actionable Takeaways

{chr(10).join(f"- {item['content']}" + (f" [{format_timestamp(item.get('timestamp_ms', 0))}]({item.get('youtube_link', '')})" if item.get('timestamp_ms') else "") for item in result['actionable_takeaways'])}

---

## 📄 Transcript

{chr(10).join(f"**[{format_timestamp(segment['start_ms'])}]** {segment['text']}" for segment in result['transcript'][:10])}

{"..." if len(result['transcript']) > 10 else ""}

---

*Generated by MindTube - AI-powered YouTube video summarization*
"""
        
        # Set appropriate headers for file download
        filename = f"{metadata['title'].replace(' ', '_')}_MindTube.md"
        headers = {
            "Content-Disposition": f'attachment; filename="{filename}"'
        }
        
        logger.info("Markdown export generated", job_id=job_id, filename=filename)
        
        return Response(
            content=markdown_content,
            media_type="text/markdown",
            headers=headers
        )
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error("Failed to export markdown", job_id=job_id, error=str(e))
        raise HTTPException(
            status_code=500,
            detail=f"Failed to export markdown: {str(e)}"
        )

def format_timestamp(ms: int) -> str:
    """Convert milliseconds to MM:SS format"""
    seconds = ms // 1000
    minutes = seconds // 60
    seconds = seconds % 60
    return f"{minutes}:{seconds:02d}"