[project]
name = "mindtube-backend"
version = "0.1.0"
description = "MindTube Backend - AI-powered YouTube video summarization service"
authors = [
    {name = "MindTube Team", email = "team@mindtube.ai"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.9"
keywords = ["youtube", "ai", "summarization", "fastapi", "llm"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Framework :: FastAPI",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Multimedia :: Video",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    # Core Framework
    "fastapi>=0.104.1,<0.105.0",
    "uvicorn[standard]>=0.24.0,<0.25.0",
    "pydantic>=2.5.0,<3.0.0",
    "pydantic-settings>=2.1.0,<3.0.0",
    
    # Async & Background Tasks
    "asyncio-mqtt>=0.16.1,<0.17.0",
    "arq>=0.25.0,<0.26.0",
    "redis>=5.0.1,<6.0.0",
    
    # Database
    "sqlalchemy>=2.0.23,<3.0.0",
    "alembic>=1.13.1,<2.0.0",
    
    # HTTP Client & API Integration
    "httpx>=0.25.2,<0.26.0",
    "aiohttp>=3.9.1,<4.0.0",
    "requests>=2.31.0,<3.0.0",
    
    # YouTube & Media Processing
    "google-api-python-client>=2.108.0,<3.0.0",
    "google-auth-httplib2>=0.2.0,<1.0.0",
    "google-auth-oauthlib>=1.1.0,<2.0.0",
    "yt-dlp>=2023.11.16",
    
    # AI/LLM Integration
    "openai>=1.3.7,<2.0.0",
    "anthropic>=0.7.7,<1.0.0",
    "tiktoken>=0.5.2,<1.0.0",
    
    # Audio Processing (for ASR)
    "openai-whisper>=20231117",
    "ffmpeg-python>=0.2.0,<1.0.0",
    "pydub>=0.25.1,<1.0.0",
    
    # Text Processing
    "nltk>=3.8.1,<4.0.0",
    "spacy>=3.7.2,<4.0.0",
    "langdetect>=1.0.9,<2.0.0",
    
    # Utilities
    "python-multipart>=0.0.6,<1.0.0",
    "python-jose[cryptography]>=3.3.0,<4.0.0",
    "passlib[bcrypt]>=1.7.4,<2.0.0",
    "python-dotenv>=1.0.0,<2.0.0",
    "tenacity>=8.2.3,<9.0.0",
    
    # Monitoring & Logging
    "structlog>=23.2.0,<24.0.0",
    "sentry-sdk[fastapi]>=1.38.0,<2.0.0",
    "prometheus-client>=0.19.0,<1.0.0",
    
    # Security
    "cryptography>=42.0.0,<43.0.0",
    "bcrypt>=4.1.2,<5.0.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.4.3,<8.0.0",
    "pytest-asyncio>=0.21.1,<1.0.0",
    "pytest-cov>=4.1.0,<5.0.0",
    "httpx>=0.25.2,<0.26.0",  # For testing
    
    # Code Quality
    "black>=23.11.0,<24.0.0",
    "flake8>=6.1.0,<7.0.0",
    "isort>=5.12.0,<6.0.0",
    "mypy>=1.7.1,<2.0.0",
    
    # Development Tools
    "pre-commit>=3.5.0,<4.0.0",
    "bandit>=1.7.5,<2.0.0",
]

[project.urls]
Homepage = "https://github.com/yourusername/mindtube"
Repository = "https://github.com/yourusername/mindtube.git"
Documentation = "https://github.com/yourusername/mindtube/docs"
"Bug Tracker" = "https://github.com/yourusername/mindtube/issues"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["app"]

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["app"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "yt_dlp.*",
    "whisper.*",
    "spacy.*",
    "nltk.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]