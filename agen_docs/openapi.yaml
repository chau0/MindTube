openapi: 3.0.3
info:
  title: MindTube API
  version: 0.1.0
servers:
  - url: https://api.example.com
paths:
  /runs:
    post:
      summary: Create a run
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [youtubeUrl]
              properties:
                youtubeUrl: { type: string }
                opts:
                  type: object
                  properties:
                    useAsr: { type: boolean, default: false }
                    outputLang: { type: string, enum: [auto, en, ja], default: auto }
                    modelTier: { type: string, enum: [fast, hq], default: fast }
      responses:
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                type: object
                properties:
                  runId: { type: string }
  /runs/{id}:
    get:
      summary: Get run metadata
      parameters:
        - in: path
          name: id
          schema: { type: string }
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Run'
        '404':
          description: Not found
  /runs/{id}/events:
    get:
      summary: Server-Sent Events for run progress
      parameters:
        - in: path
          name: id
          schema: { type: string }
          required: true
      responses:
        '200':
          description: Event stream
          content:
            text/event-stream:
              schema:
                type: string
  /runs/{id}/result:
    get:
      summary: Fetch final artifacts
      parameters:
        - in: path
          name: id
          schema: { type: string }
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  summaryMd: { type: string }
                  summaryJson: { type: object }
                  links:
                    type: object
                    additionalProperties: { type: string }
  /runs/{id}/cancel:
    post:
      summary: Cancel a run
      parameters:
        - in: path
          name: id
          schema: { type: string }
          required: true
      responses:
        '200': { description: OK }
  /transcript/upload:
    post:
      summary: Upload SRT/VTT transcript
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: Stored transcript artifact id
          content:
            application/json:
              schema:
                type: object
                properties:
                  artifactId: { type: string }
  /healthz:
    get:
      summary: Health check
      responses:
        '200': { description: OK }

components:
  schemas:
    Run:
      type: object
      properties:
        id: { type: string }
        youtubeId: { type: string }
        status: { type: string, enum: [QUEUED, RUNNING, SUCCEEDED, FAILED, CANCELED] }
        startedAt: { type: string, format: date-time }
        finishedAt: { type: string, format: date-time, nullable: true }
        errorCode: { type: string, nullable: true }
        artifacts:
          type: array
          items:
            $ref: '#/components/schemas/Artifact'
    Artifact:
      type: object
      properties:
        kind: { type: string }
        path: { type: string }
        bytes: { type: integer }
        sha256: { type: string }
