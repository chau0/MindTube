# MindTube Development Environment
# Docker Compose configuration for local development

version: '3.8'

services:
  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: mindtube-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    networks:
      - mindtube-network

  # PostgreSQL for production-like database (optional)
  postgres:
    image: postgres:15-alpine
    container_name: mindtube-postgres
    environment:
      POSTGRES_DB: mindtube
      POSTGRES_USER: mindtube
      POSTGRES_PASSWORD: mindtube_dev_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./documents/agen_docs/sql:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mindtube"]
      interval: 10s
      timeout: 3s
      retries: 3
    networks:
      - mindtube-network

  # MinIO for S3-compatible object storage (for file uploads/exports)
  minio:
    image: minio/minio:latest
    container_name: mindtube-minio
    environment:
      MINIO_ROOT_USER: mindtube
      MINIO_ROOT_PASSWORD: mindtube_dev_password
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - mindtube-network

  # Development API server (when implemented)
  api:
    build:
      context: .
      dockerfile: apps/api/Dockerfile
    container_name: mindtube-api
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=sqlite:///./mindtube.db
      - REDIS_URL=redis://redis:6379/0
      - AZURE_OPENAI_ENDPOINT=${AZURE_OPENAI_ENDPOINT}
      - AZURE_OPENAI_API_KEY=${AZURE_OPENAI_API_KEY}
      - AZURE_OPENAI_API_VERSION=${AZURE_OPENAI_API_VERSION}
    ports:
      - "8000:8000"
    volumes:
      - ./packages/core:/app/packages/core
      - ./apps/api:/app/apps/api
      - ./data:/app/data
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - mindtube-network
    profiles:
      - api

  # Development web frontend (when implemented)
  web:
    build:
      context: .
      dockerfile: apps/web/Dockerfile
    container_name: mindtube-web
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:8000
    ports:
      - "3000:3000"
    volumes:
      - ./apps/web:/app
      - /app/node_modules
    depends_on:
      - api
    networks:
      - mindtube-network
    profiles:
      - web

  # Jupyter notebook for data exploration and development
  jupyter:
    image: jupyter/scipy-notebook:latest
    container_name: mindtube-jupyter
    environment:
      - JUPYTER_ENABLE_LAB=yes
    ports:
      - "8888:8888"
    volumes:
      - ./notebooks:/home/jovyan/work
      - ./packages/core:/home/jovyan/work/mindtube
      - ./data:/home/jovyan/work/data
    networks:
      - mindtube-network
    profiles:
      - jupyter

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  minio_data:
    driver: local

networks:
  mindtube-network:
    driver: bridge

# Development profiles:
# docker compose up -d                    # Start core services (redis, postgres, minio)
# docker compose --profile api up -d      # Start with API
# docker compose --profile web up -d      # Start with web frontend
# docker compose --profile jupyter up -d  # Start with Jupyter notebook